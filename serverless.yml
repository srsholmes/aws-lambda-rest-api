service: aws-lambda-rest-api

provider:
  name: aws
  runtime: nodejs6.10
  environment:
    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
  Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}"

plugins:
  - serverless-dynamodb-local
  - serverless-offline

custom:
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: offline/migrations
  serverless-offline:
    port: 3000

functions:
  create:
    handler: lib/index.create
    events:
      - http:
          path: manifests
          method: post
          cors: true

  list:
    handler: lib/index.list
    events:
      - http:
          path: manifests
          method: get
          cors: true

  get:
    handler: lib/index.get
    events:
      - http:
          path: manifests/{id}
          method: get
          cors: true

  update:
    handler: lib/index.update
    events:
      - http:
          path: manifests/{id}
          method: put
          cors: true

  delete:
    handler: lib/index.del
    events:
      - http:
          path: manifests/{id}
          method: delete
          cors: true

resources:
  Resources:
    DynamoDbTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE}
